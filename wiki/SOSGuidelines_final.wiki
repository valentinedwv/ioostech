#summary ALL THE MATERIALS HERE ARE IN FLUX. THIS WILL BECOME THE "FINAL" DOCUMENTATION FOR THE SOS REFERENCE IMPLEMENTATION, BEFORE COPYING IT TO THE GEO-IDE WIKI
#labels Featured,SOS,IDD
#sidebar SOSTableOfContents


<wiki:toc max_depth="3" />

= Introduction =

The [http://code.google.com/p/ioostech/w ioostech wiki] contains many deliberations on the issues associated with SOS implementation.  This page serves as the table of contents or introduction for the decisions or commitments that result from the various discussions.  In other words, much of the wiki discusses what one could do, but the SOSGuidelines, document what you should do.  

This may relate to or perhaps will become the IOOS SOS Interface Definition Document.

IOOS data from fixed and mobile observing platforms can be obtained over the internet using the Sensor Observation Service (SOS) specification published by the Open Geospatial Consortium. An SOS has three basic operations:

  * GetCapabilities provides summary information about the service and about the platforms for which it provides data.
  * DescribeSensor provides descriptions of individual sensors, platforms supporting one or more sensors, and networks of related platforms.
  * GetObservation provides time-series data from one or more sensors on one or more platforms.

= SOS Requests (IDD) =

_See the new, draft [http://opendap.co-ops.nos.noaa.gov/ioos-dif-sos-test/ IDD documentation from NOS/COOPS for their test SOS service]. It's a terrific, dynamic, rich example that we should strive to replicate._

== HTTP GET Request==

*NOTE* This section is taken from the Oostethys wiki and has (will be) modified to fit the current IOOS specification.   [http://www.oostethys.org/best-practices/best-practices-get OOSTethys 2008 "Best Practices SOS HTTP GET Request" document] 

An HTTP request could be of various types: GET, POST, PUT etc., as explain in the [http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html RFC 2616]. GET passes parameters to the server in the HTTP URL (e.g. http://marinemetadata.org:9600/oostethys/sos?VERSION=1.0.0&SERVICE=SOS&REQUEST=GetCapabilities). POST sends a document to the server, allowing an message or result to be returned,  or to provide a block of XML data, among others.

At OOSTethys we found that the GET request is very popular in the oceanographic community, because it is well-understood, easier to implement and easier to query. Sensor Observation Service, however,  does not explicitly use a GET request. This section explains the GET request operations supported by OOSTethys Sensor Observation Service cookbooks. The information presented here was mostly extracted from OGC specifications and in some cases clarifications and minor comments were added. If not noted, this section complies with the OGC Web Services Common Specification 1.1.0 ([http://portal.opengeospatial.org/files/?artifact_id=20040 OGC 06-121r3]) and the Sensor Observation Service Specification 1.0 ([https://portal.opengeospatial.org/files/?artifact_id=26667 OGC 06-009r6]). If there are discrepancies between the specification and the schema, the schema is preferred. 

The document first presents the general structure of a GET request, notes about how to handle special characters and capitalization rules. Then, the document presents the GET request details for each of the Sensor Observation Service (SOS) supported by OOSTethys, which correspond to the three mandatory operations in a Sensor Observation Service (SOS):


  * [GetCapabilities#Interface_Definition_Document_(IDD) GetCapabilities]  returns general metadata about the service, operations supported and list of observation offerings;
  * [DescribeSensor#Interface_Definition_Document_(IDD) DescribeSensor] returns metadata about a sensor system. It could be an observing system, platform or a simple device, such as a bin. The return is given as a SensorML or TML document; 
  * [GetObservation#Interface_Definition_Document_(IDD) GetObservation] returns a collection of observations. each observation is composed of metadata, description of the phenomena being returned (parameter names, units of measure, reference systems) and values.


===Structure of the GET request===
The structure of the operation is specified in Table 34 ([http://portal.opengeospatial.org/files/?artifact_id=20040 Whiteside, 2007]).

||*URL*|| *Component* ||	*Description*||
||`!http://host[:port]/path[?{name[=value]&}]`	|| URL prefix of service operation. || `[ ]` denotes 0 or 1 occurrence of an optional part; `{}` denotes 0 or more occurrences.||
||`name=value&`	|| One or more standard request parameter name/value pairs as defined for each operation by this International Standard. This parameter encoding is referred to as Keyword Value Pair (KVP) encoding in this document. || ||


===Reserved characters===
||*Character* || *Reserved usage* ||
||`?` ||	Separator indicating start of query string or the KVPs.||
||`&` ||	Separator between the parameter (name/value) pairs in query string.||
||`=` ||	Separator between name and value of parameter.||
||`,`||	Separator between individual values given for a parameter.||

===Capitalization of Keyword Value Pair (KVP) names and values ===
 
*Parameter names* are case insensitive. The following example shows equivalent terms for a parameter named “request”: REQUEST, request, Request, or ReQuEsT. As a guideline, it is suggested that lowercase names be used for ease-of-reading and consistency.

*Parameter values* are case sensitive and string values are [http://en.wikipedia.org/wiki/CamelCase UpperCamelCase]. These are appropriate examples for parameter values: !GetObservation, !DescribeSensor.
 
===Escaping special characters===
[http://www.ietf.org/rfc/rfc2396.txt IETF 2396 , section 2.4.1] explains that special characters should be escaped as follows: percent character "%" followed by the two hexadecimal digits.  This is important because both URIs, and URNs could be sent as values for parameters, and they may include special characters . An online application that helps to convert special characters to escaped characters could be found [http://www.xs4all.nl/~jlpoutre/BoT/Javascript/Utils/endecode.html here].

||*Special character*||*Escaped encoding*||
||:	||%3A||
||/	||%2F||
||#	||%23||
||?	||%3F||
||=	||%3D||


=Response=

The response given by the server to valid (as described above) requests are documented on the following pages.

  * [GetCapabilities#Response GetCapabilities]
  * [DescribeSensor#Response DescribeSensor]
  * [GetObservation#Response GetObservation]

= OGC Standards and Specifications =

The versions of the international OGC standards and specifications used in the IOOS SOS implementation. The IOOS implementation includes some extensions.

|| *Specification* || *Version* || *Comments, Resources* ||
|| GML || 3.11 ||  ||
|| O&M || 1.0 || [https://wiki.52north.org/bin/view/Sensornet/SosDataModeling O&M 1.0.0 for SOS 1.0.0.(52 North)] ||
|| SOS || 1.0 ||  ||
|| SWE Common || 1.01 || Used everywhere except for om:result in GetObservation response ([http://portal.opengeospatial.org/files/?artifact_id=21273 SWE Common 1.0 Standard coupled with SensorML Standard]) ||
|| SWE Common || 2.0 || Used in om:result of GetObservation response ||
|| SensorML || 1.0 ||  ||

  * *GML*: Geographic Markup Language
  * *O&M*: Observations & Measurements
  * *SOS*: Sensor Observation Service
  * *SWE*: Sensor Web Enablement

=Rules=

This section contains IOOS specific rules that have been distilled from resolved issues or mailing list discussions. The rule should have a human readable identifier, be concise, and include a link to the original discussion for background info. Developers writing SOS clients and validators should be able to use these rules to guide their coding.

==Lower Camel Case Names==
Link: [http://code.google.com/p/ioostech/issues/detail?id=31]

Names, titles, gml ids, and other attribute values in SOS XML documents meant as human readable labels should use lower camel case (ex. sensorLocation). An exception is made for labels containing the short version of an identifier or definition URI that contains underscores (e.g. air_temperature, station_12, etc). Another exception is made for network-all. This rule does not apply to identifier values and terms from established vocabularies (e.g. http://mmisw.org/ont/cf/parameter/air_temperature or urn:ioos:station:xoos:the_station). Text containing acronyms should treat the acronym component as a normal word for readability (e.g. bprLocation instead of BPRLocation).

==Asset URN identifiers==
Link: [http://code.google.com/p/ioostech/issues/detail?id=14]

Link: [https://groups.google.com/forum/#!topic/ioostech_dev/F1SBuamGUrI/discussion]

Asset URN identifiers generally follow the convention explained at [https://geo-ide.noaa.gov/wiki/index.php?title=IOOS_Conventions_for_Observing_Asset_Identifiers], although this page needs to be updated.

Supported asset URN ids are network, sensor, and station. Platform is not a supported id.

Formats:

  * Station: urn:ioos:station:wmo:41001
  * Sensor: urn:ioos:sensor:wmo:41001:baro1
  * Network: urn:ioos:network:aoos:all-barometric

Definitions:

  * Station: http://mmisw.org/ont/ioos/definition/stationID
  * Sensor: http://mmisw.org/ont/ioos/definition/sensorID
  * Network: http://mmisw.org/ont/ioos/definition/networkID

Version (deployment date, etc) is not included in the URN standard at this time.


==Composite phenomena==
Link: [http://code.google.com/p/ioostech/issues/detail?id=1]

Although support of composite phenomena is *OPTIONAL* for IOOS service providers, the implementation of the composite phenomena shall comply with the following rules (these rules accommodate both true composite phenomena like winds, and ad-hoc requests for multiple properties like water and air temperature):
  # IOOS-defined vector variables (namely winds, currents and waves) shall be advertized in GetCapabilities response as composite phenomena that contains scalar properties defined in the CF standard names vocabulary. 
  # The supported composite phenomena are defined in the IOOS Parameter Vocabulary (e.g.: http://mmisw.org/ont/ioos/parameter/wave).
  # The exact collection of individual scalar properties that is used by a service provider to form a certain composite phenomenon shall be a subset of the properties defined in the IOOS Parameter Vocabulary for that composite phenomenon.
  # In the GetObservation response, the `<om:observedProperty>` element under each `<om:ObservationCollection/om:member/om:Observation>` block shall return a list of scalar properties only, referencing the MMI CF or IOOS parameter vocabularies.
  # The `<swe:CompositePhenomenon>` element shall be used even when the response returns a single observed property:
    * attribute `<gml:id>` is required. Each `<om:ObservationCollection/om:member/om:Observation>` block shall have a document-wide unique `<gml:id>` value. It is recommended to use just a simple integer counter next to a fixed string, as shown in examples below.
    * child element `<gml:name>` is required; the element value may be any text string.

EXAMPLE 1 (multiple scalar properties): 
{{{
<om:observedProperty>
  <swe:CompositePhenomenon dimension="4" gml:id="observedproperties1">
    <gml:name>Response Observed Properties</gml:name>
    <swe:component xlink:href="http://mmisw.org/ont/cf/parameter/air_temperature"/>
    <swe:component xlink:href="http://mmisw.org/ont/cf/parameter/wind_speed"/>
    <swe:component xlink:href="http://mmisw.org/ont/cf/parameter/wind_gust"/>
    <swe:component xlink:href="http://mmisw.org/ont/ioos/parameter/dissolved_oxygen"/>
  </swe:CompositePhenomenon>
</om:observedProperty>
}}}

EXAMPLE 2 (single scalar property): 
{{{
<om:observedProperty>
  <swe:CompositePhenomenon dimension="1" gml:id="observedproperties1">
    <gml:name>Response Observed Properties</gml:name>
    <swe:component xlink:href="http://mmisw.org/ont/cf/parameter/wind_speed"/>
  </swe:CompositePhenomenon>
</om:observedProperty>
}}}


==Versions of SOS, SWE and O&M==
Link: [http://code.google.com/p/ioostech/issues/detail?id=2]

In order to keep up the interoperability with IOOS-compliant services, the following versions shall be used:
  #. Both SOS and O&M version 1.0.
  #. SWECommon version depends on the function:
    * in GetCapabilities and DescribeSensor – SWECommon 1.0.1 (prefix `<swe:>`);
    * in GetObservation – SWE 1.0.1 (prefix `<swe:>`) except for the contents of `<om:result>`, which shall use SWE 2.0 (prefix `<swe2:>`).


==Support of `<observedProperty>`==
Link: [http://code.google.com/p/ioostech/issues/detail?id=4]

In general, SOS servers should only support what it advertises in the GetCapabilities document. Thus, an SOS server may support both fully qualified and unqualified `<observedProperty>` parameters as far as they are advertized in GetCapabilities.

IOOS-compliant SOS server shall be able to advertise and accept fully qualified `<observedProperty>` parameters.


==URN vs. URL==
Link: [http://code.google.com/p/ioostech/issues/detail?id=3]

The use of both URNs and URLs are allowed for now, but it is recommended to use URLs where possible. URNs should be used only where a specific IOOS guideline has stipulated it (mainly for station id, sensor id, and "network" id).

==Requests with no time filtering==
Link: [http://code.google.com/p/ioostech/issues/detail?id=17]

In general, any IOOS-compliant SOS server shall follow the SOS version 1.0 specification requirements. However, in the case when SOS request does not contain any time filter, the SOS v1.0 fails to properly describe the server behavior. 
In that specific case, the IOOS-compliant server shall follow the SOS v2.0 specification, which requires the server to return all records matching a user request, although a result limit may be employed, and `ResponseExceedsSizeLimit` exception code shall be returned if that limit is exceeded.

==External link in DescribeSensor response==
Link: [http://code.google.com/p/ioostech/issues/detail?id=18]

To represent an external link in the contact information part of the DescribeSensor response, an IOOS-compliant service shall use `< xlink:href>` attribute of the `<sml:contact>` element in the following manner:
{{{
<sml:contact xlink:role="urn:ogc:def:classifiers:OGC:contactType:publisher" xlink:href="http://sdf.ndbc.noaa.gov/">
  <sml:ResponsibleParty>
    <sml:contactInfo/>
  </sml:ResponsibleParty>
</sml:contact>
}}}


==Representing feature type in `GetObservation`==
Link: [http://code.google.com/p/ioostech/issues/detail?id=21]

IOOS-compliant SOS server shall represent FeatureType (e.g., timeSeries, point, profile, etc)in GetObservation response as follows (this representation keeps the SWE elements the same between all FeatureTypes): 

{{{
<om:featureOfInterest>
  <gml:FeatureCollection>
    <gml:metaDataProperty>
      <gml:name codeSpace="http://cf-pcmdi.llnl.gov/documents/cf-conventions/1.6/cf-conventions.html#discrete-sampling-geometries">timeSeries</gml:name>
    </gml:metaDataProperty>
    <gml:location>
      ...
    </gml:location>
  </gml:FeatureCollection>
</om:featureOfInterest>
}}}

Each unique CF feature type (discrete-sampling-geometries) shall be encoded in a separate `<om:member/om:Observation>` block that may contain multiple stations. Conversely, all stations corresponding to one feature type shall be returned in a single `<om:member/om:Observation>` block. The encoding of the reference to the CF feature type shall be done within `</om:ObservationCollection/om:member/om:Observation/om:featureOfInterest/gml:FeatureCollection>`:

{{{
<gml:metaDataProperty>
	<gml:name codeSpace="http://cf-pcmdi.llnl.gov/documents/cf-conventions/1.6/cf-conventions.html#discrete-sampling-geometries">timeSeries</gml:name>
</gml:metaDataProperty>
}}}

==Child procedures in `DescribeSensor`==
Link: [http://code.google.com/p/ioostech/issues/detail?id=23]

The IOOS-compliant SOS service shall encode in the `<sml:component>` the child procedure ID (asset identifier) and link to the child's DescribeSensor response using `<xlink:title>` and `<xlink:href>` respectively; any further child information is optional:
{{{
<sml:components>
  <sml:ComponentList>
    <!-- sml:component with name and xlink:href to DescribeSensor is required -->  
    <sml:component name="component1" xlink:href="http://192.168.8.15:8080/sos?REQUEST=DescribeSensor&service=SOS&version=1.0.0&procedure=urn:ogc:object:feature:Sensor:IFGI:ifgi-sensor-1&outputFormat=text%2Fxml%3Bsubtype%3D%22sensorML%2F1.0.1%22 xlink:title="urn:ogc:object:feature:Sensor:IFGI:ifgi-sensor-1"/>
    <sml:component name="component2" xlink:href="http://192.168.8.15:8080/sos?REQUEST=DescribeSensor&service=SOS&version=1.0.0&procedure=urn:ogc:object:feature:Sensor:IFGI:ifgi-sensor-2&outputFormat=text%2Fxml%3Bsubtype%3D%22sensorML%2F1.0.1%22 xlink:title="urn:ogc:object:feature:Sensor:IFGI:ifgi-sensor-2"/>
     <!-- any further summary sml:System info is optional -->
     <sml:System gml:id="station-bb0101">
        <gml:description>OSTEP2</gml:description>
        <sml:identification xlink:href="urn:ioos:station:NOAA.NOS.CO-OPS:bb0101" />
        <sml:location>
          <gml:Point srsName="urn:ogc:def:crs:epsg::4326" gml:id="LOCATION-bb0101">
            <gml:coordinates>36.8572 -76.30833</gml:coordinates>
          </gml:Point>
        </sml:location>
      </sml:System>
    </sml:component>
  ...
  </sml:ComponentList>
</sml:components>
}}}

==XML header and namespace references==
Link: [http://code.google.com/p/ioostech/issues/detail?id=25]

The IOOS-compliant SOS service shall conform to the following specific patterns for the namespace references in the GetCapabilities and GetObservation response XML headers:
  #. In GetCapabilities, the `<swe:>` namespace definition may be omitted.
  #. In GetObservation, the `<swe:>` and `<swe2:>` namespace definitions shall be included, and shall refer to versions 1.0.1 and 2.0 respectively (for additional information look [SOSGuidelines_final#Versions_of_SOS,_SWE_and_O&M here]).
  #. In both GetCapabilities and GetObservation, the `<gml:>` namespace definition may omit reference to a version number (because the O&M 1.0 schema already defines GML 3.1.1 as the version used).

== Station offerings in `GetCapabilities` and `GetObservation`==
Link: [http://code.google.com/p/ioostech/issues/detail?id=26]

In GetCapabilities, the `<sos:ObservationOffering>` element for a network offerings shall contain just a single `<sos:procedure>` element with `<xlink:href="NETWORK ID URN">` attribute, whereas the individual station procedures encompassed by the network offering shall be obtained via a DescribeSensor request.

A GetObservation request to IOOS-compliant SOS server shall include *ONLY* one offering, but may include multiple procedures.

A GetObservation response shall conform to the following rules:
  * The network offering URN shall be displayed just once, outside the `<om:Observation>` elements, as the content of a `</om:ObservationCollection/gml:name>` element. For single station offerings, `</om:ObservationCollection/gml:name>` may indicate the station URN.
The `<om:ObservationCollection/om:member/om:Observation/gml:name>` shall follow the naming pattern <OFFERING ASSET URN>-<FEATURE TYPE>, e.g.: 
{{{
<gml:name>urn:ioos:network:noaa.nws.ndbc:all-timeSeries</gml:name>
}}}
  * The single `<om:procedure>` element shall list all the station URN's corresponding to the `<om:Observation>` feature type, and the station URNs shall be placed into individual `<gml:member>` elements within `<om:procedure>` as follows:
{{{
<om:procedure>
  <om:Process>
    <gml:member xlink:href="urn:ioos:station:wmo:41001" />
    <gml:member xlink:href="urn:ioos:station:wmo:41002" />
  </om:Process>
</om:procedure>
}}}

== WMO IDs==
Link: [http://code.google.com/p/ioostech/issues/detail?id=41]

Station WMO IDs should be specified (when available) in the identifier section of a DescribeSensor response as follows:
{{{
<sml:identifier name="wmoID">
    <sml:Term definition="http://mmisw.org/ont/ioos/definition/wmoID">
        <sml:value>41001</sml:value>
    </sml:Term>
</sml:identifier>
}}}
The _wmoID_ should be specified as a separate identifier even if the main _stationID_ URN uses the WMO authority.