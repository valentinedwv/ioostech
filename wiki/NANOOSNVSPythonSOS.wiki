#summary Python SOS for NANOOS NVS
#labels NANOOS,SOS,Python

<wiki:toc max_depth="2" />

= Python SOS for NANOOS NVS NRT in-situ Assets =

*_The new server is not official yet, but will be soon (likely by Nov 18, 2011). So, the information and data from these responses are intended for testing only!_*

Documentation for the IOOS Python SOS server developed recently by [http://nanoos.org NANOOS] (first by CMOP, then enhanced by APL-UW).

Our intent is to release the code, eventually, when we've cleaned it up and documented it just enough. I also intend to document conventions used (IOOS conventions), with links to where they're specified; when something seemed ambiguous, I'll try to describe the rationale behind decisions made.

== Defaults and minimalist, simplified requests ==

The NANOOS SOS makes extensive use of "defaults" to enable the simplest possible requests to be composed, making the service less complex and intimidating to users (including code, as these simplifications allow for simpler parsers). Many of these are illustrated in the [#Sample_requests_and_responses Sample requests and responses] section below; the [#stations_and_observed_properties stations and observed properties] section describes those related to the acceptance of unqualified station and _observedProperty_ values. 

  * In GetObservation, when the _eventTime_ key is ommitted, the latest observation is returned *(OOT)*. When the station and observed property are measured at multiple depths, the latest observation per depth is returned.
  * In GetObservation, when the _responseFormat_ key is ommitted, _text/plain_ is assumed. This is the same as _text/csv_, except that for browser requests the response is returned inline rather than as a file download. I think this is much more friendly to users and experimentation.

*I'll describe all defaults and simplifications ... eventually.*

*(OOT)* = An [http://oostethys.org/ OOsTethys] convention.

== stations and observed properties ==

As illustrated below, this SOS service accepts both fully explicit and shorter, unqualified station (_procedure_ or _offering_, depending on request) and _observedProperty_ arguments; for example:
  * *station.* _procedure_ key in DescribeSensor and _offering_ key in GetObservation. Fully explicit urn: _urn:ioos:station:nanoos:ORCA_Hoodsport_. Unqualified value: _ORCA_Hoodsport_. The latter corresponds to the _NANOOS/NVS asset id_.
  * *observedProperty.* Fully explicit urn: _http://mmisw.org/ont/cf/parameter/sea_water_temperature_. Unqualified value: _sea_water_temperature_. Only _CF names_ are currently accepted.

The use of NANOOS/NVS asset id's allow for direct URL-based linking to NVS, such as:
  * Go to the asset infowindow (pop up) on NVS: http://www.nanoos.org/nvs/nvs.php?section=NVS-Assets&infoWindow=action::auto_open||asset_class::siso||asset_id::ORCA_Hoodsport
  * Use the NVS light-weight JSON web services to request the asset's latest observations for all variables: http://www.nanoos.org/nvs/services/get_asset_info.php?opt=recent_values&asset_type=siso&asset_id=ORCA_Hoodsport&var_id=all&units_mode=v1 . These RESTful services are used by the NVS mobile apps and other NANOOS regional data-transport services.

== Data encodings available ==

GetObservation data responseFormat options: text/plain, text/csv, application/xml. Explain each, provide examples (links, in-line text) and relevant documentation (IOOS CSV doc).

== Sample requests and responses ==

All these examples are currently based on multi-depth (profiling) platforms. Explanations will be added later.

  # *GetCapabilities*
    * Fully explicit request:  [http://habu.apl.washington.edu/pyws/sos.py?service=SOS&version=1.0.0&request=GetCapabilities]
    * Minimalist version, with defaults:  [http://habu.apl.washington.edu/pyws/sos.py]
    * Request just the OperationsMetadata section of the GetCapabilities response:  [http://habu.apl.washington.edu/pyws/sos.py?service=SOS&request=GetCapabilities&sections=OperationsMetadata]
  # *DescribeSensor*
    * Fully explicit request:  [http://habu.apl.washington.edu/pyws/sos.py?service=SOS&version=1.0.0&request=DescribeSensor&procedure=urn:ioos:station:nanoos:ORCA_Hoodsport&outputFormat=text/xml;subtype="sensorML/1.0.1"]
    * Minimalist version, with defaults and short names (not full urn's):  [http://habu.apl.washington.edu/pyws/sos.py?service=SOS&request=DescribeSensor&procedure=ORCA_Hoodsport]
  # *GetObservation*
    * Fully explicit request, for latest data:  [http://habu.apl.washington.edu/pyws/sos.py?service=SOS&version=1.0.0&request=GetObservation&offering=urn:ioos:station:nanoos:ORCA_Hoodsport&observedProperty=http://mmisw.org/ont/cf/parameter/sea_water_temperature&responseFormat=text/plain]
    * Minimalist version, with defaults and short names (not full urn's):  [http://habu.apl.washington.edu/pyws/sos.py?service=SOS&request=GetObservation&offering=ORCA_Hoodsport&observedProperty=sea_water_temperature&responseFormat=text/plain]
    * Another Minimalist request, but specifying a time interval:  [http://habu.apl.washington.edu/pyws/sos.py?service=SOS&request=GetObservation&offering=ORCA_Twanoh&observedProperty=mass_concentration_of_oxygen_in_sea_water&eventTime=2011-10-18T00:00Z/2011-10-20T23:00Z&responseFormat=text/plain]

= Miscellaneous Notes =

  * The NANOOS SOS GET requests are exhaustively case-insensitive. All keys and some values are case insensitive; eg, request=GetObservation and REQUEST=getobservation will both work. [https://groups.google.com/forum/#!msg/ioostech_dev/xMp3zuXcLHQ/BwnMWRIu-BQJ See this email thread with Eric Bridger for context.]
  * This code has no direct relationship to the [http://www.oostethys.org/downloads/sos-cookbook-python/pysos-version-0.1 older Python SOS server that was also developed by CMOP / NANOOS, around 2007/2008]; That code is basically orphaned, as far as we know.

== Limitations ==

  * An important current limitation has nothing to do with the code itself, but with the data store behind it: only the previous 30 days of data are available. 
  * Limitations of this SOS code are mainly related to GetObservation:
    * only one offering (1 station) and one observedProperty (measured parameter) can be requested at a time
    * BBOX parameter is not implemented
    * the only "standard" data encoding response available is the IOOS CSV specification
    * vector observedProperty requests (eg, Winds) are not implemented.
  * Only GET requests are implemented. POST requests are not implemented, and there are no near-term plans to do so.