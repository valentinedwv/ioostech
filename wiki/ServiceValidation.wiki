#summary Draft brief on OGC Services Validation
#sidebar SOSTableOfContents

<wiki:toc max_depth="3" />

=Service Validation=

The US IOOS is developing and deploying the DMAC standards in order to ensure interoperable, quality-controlled ocean data that comes from various sources such as academia, federal agencies, private sector industries, or local governments. The standards shall be applied to the IOOS partners within the framework of the partners’ offerings quality verification process that should finally result in formal certification. 
Both federal and non-federal partners’ offerings need to be verified for compliance with DMAC standards in order for the provided data to be included into the US IOOS system. Non-federal partners may use the DMAC compliance for civil liability protection or just to ensure interoperability, and the formal certification process may be an identified means of verifying compliance.

==Service testing scope==

The DMAC service development is in progress, and is almost completed. The implementations are about to start. This regimen is intended to examine the service and content of the DMAC implementation. 
The service validation seems to be an all-sufficient task, and can be done irrespective of other IOOS activity; however, since IOOS has carried out a development and implementation of the IOOS Registry, which among other functions is supposed to periodically probe partners’ services and harvest offered data, it would be highly beneficial to coordinate all testing activities (and especially any development of test tools) with IOOS Registry developers.
Formal verification of interoperability of data offerings is the core part of the compliance certification. The verification applies to both federal (NDBC, CO-OPS) and non-federal (RAs) partners, and includes series of tests of the partners’ offerings, as follows:

 * Data access service conformance testing – verifies compliance with the OGC specification for SOS, SensorML, SWECommon, WMS, WCS, and OPeNDAP specification for DAP access service (it is assumed that both 52North and ncSOS varieties should be tested with the same tool): 
   1. SOS, WCS, WMS, and SensorML – test engine and scripts developed by the OGC Compliance and Interoperability Testing Initiative (CITE); currently goes through an extensive modification and enhancement process; its growing popularity results in a rapid errors and bugs identification and correction. The CITE scripts do not test all features of the services (see below OGC SOS 1.0.0 `r4` Compliance Testing – what is tested and what is not); thus, some development is needed to fully cover the IOOS services functionality.<br>The following is list of currently available tests and their status:
|| *Specification* || *Version* || *Revision* || *Status* ||
||Geography Markup Language (GML)||3.2.1||3.2.1-`r2` ||Beta||
||Sensor Model Language (SensorML)||1.0.1||`r2` ||Beta||
||Sensor Observation Service (SOS)||1.0.0||`r6` ||Final||
||Sensor Observation Service (SOS)||2.0||`r1` ||Beta||
||Web Coverage Service (WCS)||1.0.0||`r5` ||Final||
||Web Coverage Service (WCS)||1.1.1||`r1` ||Final||
||Web Coverage Service (WCS)||2.0.1||`r2` ||Beta||
||Web Coverage Service - Earth Observation Profile||1.0 (pending)||`r2` ||Beta||
||Web Map Server (WMS) - Client||1.3.0||`r2` ||Beta||
||Web Map Service (WMS)||1.1.1||`r3` ||Final||
||Web Map Service (WMS)||1.3.0||`r4` ||Final||


   2. SWECommon – the proper test tool should be investigated; no OGC CITE test is currently available
  
   3. OPeNDAP – the proper test tool should be investigated; in case of ERDDAP no extensive testing may be necessary
 * Metadata conformance testing – verifies compliance of metadata included in or accompanying requested datasets (files) with the IOOS endorsed standards (e.g. CF Conventions, SensorML, MMI, IOOS DCS, etc.):
   # netCDF – the CF-Convention compliance checker for NetCDF format developed at the Hadley Centre for Climate Prediction and Research, UK Met Office
   # MMI – the proper test tool should be investigated; possibly just visual observation of the data samples and comparison with the specs
   # IOOS DCS – observation of the data samples and comparison with the IOOS specs 

 * Data quality – methods and test tools should be developed


==Documents and specifications==

For the purposes of this testing, the controlling documents for the DMAC services are (the list is open):
 * OGC SOS 1.0.0 Specification
 * OGC SOS 2.0 Specification (for Milestone 2.0)
 * OGC Observation & Measurement Specification
 * OGC Web Services Common Specification, Version 1.1.0 `[OGC 06-121r3`]
 * OGC SensorML v1.0 Specification
 * OGC SWECommon Data Model v2.0 (mostly for Milestone 2.0)
 * XML schemas for all services and metadata
 * Ontologies (vocabularies, definitions, etc.) ([http://mmisw.org/orr/#b-http://mmisw.org/orr/] and [https://marinemetadata.org/references/ioosparameter-https://marinemetadata.org/references/ioosparameter])
 * SOS response templates (Milestone 1.0):
   ** OM-GetObservation.xml
   ** SML-DescribeSensor-Network.xml
   ** SML-DescribeSensor-Station.xml
   ** SOS-GetCapabilities.xml
   ** SWE-MultiStation-TimeSeries.xml
   ** SWE-MultiStation-TimeSeries_QC.xml
   ** SWE-SingleStation-SingleProperty-TimeSeries.xml
   ** SWE-SingleStation-TimeSeriesProfile.xml
   ** SWE-SingleStation-TimeSeriesProfile_QC.xml
 * List of entry points, and schedule of IOOS SOS implementation at the National Data Buoy Center (NDBC), Center for Operational Oceanographic Products and Services (CO-OPS), and 11 regions.


==Process==

 * The US IOOS test entity will use a test tool – either online or local desktop – to make appropriate queries of the services. The NBDC, CO-OPS, and RAs will be consulted to insure the requests are reasonable and appropriate within the context of the DMAC Milestone.
 * The service requests and responses will be documented and analyzed in order to demonstrate the consistency, or lack thereof, of the responses from the services.


==Elements of Service Validation==

Some aspects of validation, and questions that validation should provide answers to:
 # Server normalcy 
   ** Is the server online and sending out products?
 # Data format and metadata syntactic and semantic validity 
   ** Does the data the service is sending out have the expected and agreed structure and metadata?
   ** Does the metadata conform to the metadata from the source datasets?  To reality?
 # Data missing values 
   ** Do the products contain missing values?  
   ** Does the count and geographic distribution of these values match what is expected?  
 # Data values validity 
   ** Are the quantitative values in the data right? 
   ** Are the values retrieved from the service traceable to the calculations (if any has been done)?
   ** How do the values compare to the expected distribution? Are they believable?
   ** How do the values compare to values from other services (if available)?
   ** 
 # etc.


=`OGC SOS 1.0.0 r6 Compliance Testing`=

==Overview==

This test suite is based on the following OGC specifications:
 * OpenGIS Web Services Common Specification, Version 1.1.0 `[OGC 06-121r3`]
 * Definition Identifier URNs in OGC Namespace, Version 1.1.0 `[OGC 06-023r1`] (ISO/CD 19136, OGC 03-105r1)
 * OpenGIS Sensor Observation Service Implementation Specification, Version 1.0 `[OGC 06-009r6`]

==Test Data==

   n/a

==Namespaces==

Service being tested must use these namespaces:

||gml||http://www.opengis.net/gml||
||ows||http://www.opengis.net/ows/1.1||
||ogc||http://www.opengis.net/ogc||
||om||http://www.opengis.net/om/1.0||
||sensorML v1.0.1||http://www.opengis.net/sensorML/1.0.1||
||sensorML v1.0||http://www.opengis.net/sensorML/1.0||
||sos||http://www.opengis.net/sos/1.0||
||tml||http://www.opengis.net/tml||


==Schemas==

All schemas used for validation in these tests can be found at: http://schemas.opengis.net/ 


==Release Notes==

Release notes are available from the [https://svn.opengeospatial.org/ogc-projects/cite/scripts/sos/1.0.0/tags/r6/web/relnotes.txt relnotes.txt].

==What is tested==

 * GetCapabilities, GET method
 * DescribeSensor, POST method
 * GetObservation, POST method

==What is not tested==

 * DescribeSensor, GET method
 * GetObservation, GET method
 * GetObservation with "result" parameters/filters
 * Optional operations: 
   ** DescribeFeatureType
   ** DescribeObservationType
   ** DescribeResultModel
   ** GetObservationById
   ** GetResult
   ** GetFeatureOfInterest
   ** GetFeatureOfInterestTime
   ** InsertObservation
   ** RegisterSensor


==Test Decomposition==

The following test break-down may not be completely relevant as it was done for previous revision of the test; however, it may be used for reference anyway.

*OWS Common Tests*
 *sos:ows-main 
 *owsTests:ows-main 
 *owsTests:ows-OWS.GetCapabilities.1 
 *owsTests:ows-OWS.ContentType.1 
 *owsTests:ows-OWS.GetCapabilities-Exceptions.1 
 *owsTests:ows-OWS.GetCapabilities-Exceptions.2 
 *owsTests:ows-OWS.GetCapabilities-Exceptions.3 
 *owsTests:ows-OWS.GetCapabilities-Exceptions.5 
 *owsTests:ows-OWS.CaseInsensitiveKvpNames.1 
 *owsTests:ows-OWS.GetCapabilities-AcceptVersions.1 
 *owsTests:ows-OWS.GetCapabilities-AcceptVersions.2 
 *owsTests:ows-OWS.GetCapabilities-AcceptVersions.3 

*General SOS Tests*
 *sos:general-main 
 *sos:general-SOS.General-InvalidRequest.1 
 *sos:general-SOS.General-ValidResponse.1 

*Core SOS Tests*
 *sos:core-main 

*GetCapabilities Tests*
 *getCapabilities:core-SOS.GetCapabilities-KVPRequestParameterHandling.1 
 *getCapabilities:core-SOS.GetCapabilities-KVPRequestServiceParameterHandling.1 
 *getCapabilities:core-SOS.GetCapabilities-KVPRequestRequestParameterHandling.1 
 *getCapabilities:core-SOS.GetCapabilities-OperationsMetadataMandatoryOperations.1 
 *getCapabilities:core-SOS.GetCapabilities-OperationsMetadaOptionalOperations.1 
 *getCapabilities:core-SOS.GetCapabilities-ResponseContentsValidTime.1 
 *getCapabilities:core-SOS.GetCapabilities-ResponseContentsValidProcedure.1 
 *getCapabilities:core-SOS.GetCapabilities-ResponseContentsValidObservedProperty.1 
 *getCapabilities:core-SOS.GetCapabilities-ResponseContentsValidResponseFormat.1
 *getCapabilities:core-SOS.GetCapabilities-ResponseContentsValidResultModel.1 
 *getCapabilities:core-SOS.GetCapabilities-ResponseContentsValidResponseMode.1 

*Describe Sensor Tests*
 *describeSensor:core-SOS.DescribeSensor-RequestInvalidMIMEType.1 
 *describeSensor:core-SOS.DescribeSensor-RequestInvalidProcedure.1 
 *describeSensor:core-SOS.DescribeSensor-ResponseMatchingResponseFormat.1 
 *describeSensor:core-SOS.DescribeSensor-ResponseMatchingProcedure.1 

*GetObservation Tests*
 *getObservation:core-SOS.GetObservation-RequestInvalidSRSName.1 
 *getObservation:core-SOS.GetObservation-RequestInvalidOffering.1 
 *getObservation:core-SOS.GetObservation-RequestInvalidEventTime.1 
 *getObservation:core-SOS.GetObservation-RequestInvalidProcedure.1 
 *getObservation:core-SOS.GetObservation-RequestInvalidFeatureOfInterest.1 
 *getObservation:core-SOS.GetObservation-RequestInvalidObservedProperty.1 
 *getObservation:core-SOS.GetObservation-RequestInvalidResult.1 
 *getObservation:core-SOS.GetObservation-RequestInvalidResponseFormat.1 
 *getObservation:core-SOS.GetObservation-RequestInvalidResultModel.1 
 *getObservation:core-SOS.GetObservation-RequestInvalidResponseMode.1 
 *getObservation:core-SOS.GetObservation-ResponseMatchingSRSData.1 
 *getObservation:core-SOS.GetObservation-ResponseMatchingProcedureData.1 
 *getObservation:core-SOS.GetObservation-ResponseMatchingObservedPropertyData.1 
 *getObservation:core-SOS.GetObservation-ResponseAdvertisedEventTimeData.1 
 *getObservation:core-SOS.GetObservation-ResponseMatchingEventTimeData.1 
 *getObservation:core-SOS.GetObservation-ResponseMatchingFeatureOfInterestData.1 
 *getObservation:core-SOS.GetObservation-ResponseMatchingResultData.1 
 *getObservation:core-SOS.GetObservation-ResponseMatchingResponseFormatData.1 