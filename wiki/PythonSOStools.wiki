#summary Python Data Services. An initial scratchpad, that I'll grow incrementally. -Emilio
#labels Python

<wiki:toc max_depth="2" />

= Python SOS Data Services =

We're in the [http://en.wikipedia.org/wiki/Snake_%28zodiac%29 Year of the Water Snake] (Feb 2013 on). Big things are bound to happen in the world of Python services for [http://en.wikipedia.org/wiki/Sea_serpent marine] and [http://en.wikipedia.org/wiki/Giant_anaconda hydrological] data.

== Events and opportunities in the near future ==

  * [http://conference.scipy.org/scipy2013/ SciPy 2013, Austin, June 24-29]. 
    * Could be good chance to meet with WOFpy/ulmo gang, and bring in Kyle (pyoos), too?! An opportunity to have a *"Water Python services" mini summit*?! Also to entice Chris Barker, Rich Signell, Rob Hetland, Tom Kralidis (OWSLib, pycsw), Roberto Almeida, Jeff Horsburgh (CUAHSI HIS) and others?
    * _Update (7/19/2013):_ Several sessions were relevant and attended by a relevant crowd. I organized a small, brief Birds of a Feather: [http://conference.scipy.org/scipy2013/bof_detail.php?id=50 Data access and munging tools for oceanographic and hydrological applications], attended by Rich Signell, Alex Crossby, Dharhas Pothina, Andy Wilson, Philip ? (UK Met / Cartopy), Chris Barker, and maybe one more person...
  * I'd like to get in touch with IOOS, IOOS Python geeks, the Texas WOFpy/ulmo gang, and others to set up a webex conference call (on the IOOS webex) to get these linkages and communications started. Mid to late May 2013?

== Key "high-level" libraries & code ==

Roughly ordered from higher to lower level, in focus.

  * [NANOOSNVSPythonSOS NANOOS SOS]. Server software.
  * [https://github.com/swtools/ WOFpy/ulmo/pyhis group]. Based in Austin. Centered around the CUAHSI HIS stack (WOF/WaterML), though not exclusively.
    * [https://github.com/swtools/WOFpy WOFpy]. Server software, for CUAHSI HIS water data services: WaterML 1.0 + WaterOneFlow (WOF) 1. Note that WOFpy implements HTTP GET requests (REST-like, but using parameter-argument pairs), unlike the original WOF 1 specifications and most implementations out there. [http://waterservices.usgs.gov/ FYI, USGS also has a GET WOF 1 implementation.]
    * [https://github.com/twdb/ulmo ulmo]. Client software. (Replaces the now-deprecated "pyhis" package, developed by the same group)
  * [http://code.google.com/p/istsos/ istSOS]. Server software.
  * [https://github.com/asascience-open/pyoos pyoos]. Client software.
  * [http://geopython.github.com/OWSLib/ OWSLib]. Mostly client. Thanks to Kyle Wilcox (ASA), it now includes SOS & SensorML requests and parsing, and WaterML 1.0/1.1 parsing.
  * [http://code.google.com/p/netcdf4-python/ netcdf4-python]. Mostly client.
  * [http://pydap.org Pydap]. Server/Client.
  * [http://cfpython.bitbucket.org/ cf-python]. Package that implements the CF data model for reading, writing and processing of data and its metadata. Installation also deploys these two shell utilities (built on cf-python) for inspecting and combining datasets: _cfdump_ (view CF fields) and _cfa_ (create aggregated CF datasets). [https://groups.google.com/d/msg/ioos_tech/yNSDQw1vWkA/h8JuEhjiOzgJ Derrick mentioned these tools on an ioos_tech email from 4/24/2013.]


== Mailing lists and groups ==

  * [http://librelist.com/browser/pywaterdata/ pywaterdata email list]. Currently limited to the WOFpy/ulmo/pyhis group (ie, mainly CUAHSI HIS hydro data services)
  * [http://code.google.com/p/waterpython/ Water Python Google Code group]. Never really got off the ground after a bit of enthusiasm back in early 2010 (Chris Barker, Rob Hetland, etc). But could be repurposed....
  * [http://oceanpython.org/ oceanpython.org], from OTN


= Sketch of a Code Architecture for a Python SOS server =

Initial goal is to support only the mandatory _core_ operations (GetCapabilities, DescribeSensor and GetObservation). Additional data-consumer oriented _enhanced_ requests may be targeted in the future, particularly GetFeatureOfInterest, GetResult and DescribeResultModel. There are no plans to support _transactional_ operations (RegisterSensor and InsertObservation).

== Core elements ==
  * [http://pycsw.org/ pycsw] can serve as the template and pattern for building an OWSLib-based SOS server. pycsw already supports GET (KVP), POST (XML) and SOAP requests. Important new version ([http://geopython.github.io/pycsw-workshop/docs/future.html 1.6]) is planned for release in June/July.
  * [https://github.com/swtools/WOFpy WOFpy]. In collaboration with WOFpy/ulmo TWDB group, support WaterML 1.x (and WOF services) and WaterML 2.0 + SOS 2.
  * [https://github.com/asascience-open/paegan paegan] "attempts to fill the need for a high level common data model (CDM) library for array based met/ocean data". (See [http://www.unidata.ucar.edu/software/netcdf-java/CDM/ this] and [http://www.unidata.ucar.edu/projects/THREDDS/CDM/CDM-TDS.htm that] for info on the CDM).
  * [NANOOSNVSPythonSOS NANOOS Python SOS] server software. Currently it has a limited scope and is not highly generalizable, but it will provide guidance (and some code) for how all the components should come together.
  * [http://code.google.com/p/istsos/ istSOS]. What can we learn or borrow from it?
  * [http://geopython.github.com/OWSLib/ OWSLib]. pycsw already uses OWSLib "for CSW client and metadata parser". [http://geopython.github.io/OWSLib/#sos SOS 1.0 and 2.0 (SWE/SensorML) parsing and encoding is already included in OWSLib.]
  * [http://www.sqlalchemy.org/ SQLAchemy] for database bindings. Both pycsw and WOFpy already rely on SQLAlchemy.


= Other relevant, but somewhat tangential efforts =

  * [http://scitools.org.uk Scitools]. Run by the UK Met Office. Python libraries intended to interact with CF datasets (Iris package) and generate commonly needed oceanographic data plots more readily (Cartopy package). Very cool stuff. [https://groups.google.com/d/topic/ioos_tech/91VLT0GLXKE/discussion Here's a 4/12/2013 thread on ioos_tech list, where Derrick mentioned this].